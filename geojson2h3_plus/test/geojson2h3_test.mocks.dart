// Mocks generated by Mockito 5.2.0 from annotations
// in geojson2h3/test/geojson2h3_test.dart.
// Do not manually edit this file.

import 'package:h3_common/h3_common.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBigInt_0 extends _i1.Fake implements BigInt {}

class _FakeLatLng_1 extends _i1.Fake implements _i2.LatLng {}

class _FakeCoordIJ_2 extends _i1.Fake implements _i2.CoordIJ {}

/// A class which mocks [H3].
///
/// See the documentation for Mockito's code generation for more information.
class MockH3 extends _i1.Mock implements _i2.H3 {
  MockH3() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isValidCell(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3IsValid, [h3Index]),
          returnValue: false) as bool);
  @override
  bool isPentagon(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3IsPentagon, [h3Index]),
          returnValue: false) as bool);
  @override
  bool isResClassIII(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3IsResClassIII, [h3Index]),
          returnValue: false) as bool);
  @override
  int getBaseCellNumber(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3GetBaseCell, [h3Index]),
          returnValue: 0) as int);
  @override
  List<int> getIcosahedronFaces(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3GetFaces, [h3Index]),
          returnValue: <int>[]) as List<int>);
  @override
  int getResolution(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3GetResolution, [h3Index]),
          returnValue: 0) as int);
  @override
  BigInt latLngToCell(_i2.LatLng? LatLng, int? res) =>
      (super.noSuchMethod(Invocation.method(#geoToH3, [LatLng, res]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  _i2.LatLng cellToLatLng(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3ToGeo, [h3Index]),
          returnValue: _FakeLatLng_1()) as _i2.LatLng);
  @override
  List<_i2.LatLng> cellToBoundary(BigInt? h3Index) =>
      (super.noSuchMethod(Invocation.method(#h3ToGeoBoundary, [h3Index]),
          returnValue: <_i2.LatLng>[]) as List<_i2.LatLng>);
  @override
  BigInt cellToParent(BigInt? h3Index, int? resolution) =>
      (super.noSuchMethod(Invocation.method(#h3ToParent, [h3Index, resolution]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  List<BigInt> cellToChildren(BigInt? h3Index, int? resolution) => (super
      .noSuchMethod(Invocation.method(#h3ToChildren, [h3Index, resolution]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  BigInt cellToCenterChild(BigInt? h3Index, int? resolution) => (super
      .noSuchMethod(Invocation.method(#h3ToCenterChild, [h3Index, resolution]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  List<BigInt> gridDisk(BigInt? h3Index, int? ringSize) =>
      (super.noSuchMethod(Invocation.method(#kRing, [h3Index, ringSize]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> gridRingUnsafe(BigInt? h3Index, int? ringSize) =>
      (super.noSuchMethod(Invocation.method(#hexRing, [h3Index, ringSize]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> polygonToCells(
          {List<_i2.LatLng>? coordinates,
          int? resolution,
          List<List<_i2.LatLng>>? holes}) =>
      (super.noSuchMethod(
          Invocation.method(#polyfill, [], {
            #coordinates: coordinates,
            #resolution: resolution,
            #holes: holes
          }),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> compactCells(List<BigInt>? hexagons) =>
      (super.noSuchMethod(Invocation.method(#compact, [hexagons]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> uncompactCells(List<BigInt>? compactedHexagons, {int? resolution}) =>
      (super.noSuchMethod(
          Invocation.method(
              #uncompact, [compactedHexagons], {#resolution: resolution}),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  bool areNeighborCells(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(
          Invocation.method(#h3IndexesAreNeighbors, [origin, destination]),
          returnValue: false) as bool);
  @override
  BigInt cellsToDirectedEdge(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(
          Invocation.method(#getH3UnidirectionalEdge, [origin, destination]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  BigInt getDirectedEdgeOrigin(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(
              #getOriginH3IndexFromUnidirectionalEdge, [edgeIndex]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  BigInt getDirectedEdgeDestination(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(
              #getDestinationH3IndexFromUnidirectionalEdge, [edgeIndex]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  bool isValidDirectedEdge(BigInt? edgeIndex) => (super.noSuchMethod(
      Invocation.method(#h3UnidirectionalEdgeIsValid, [edgeIndex]),
      returnValue: false) as bool);
  @override
  List<BigInt> directedEdgeToCells(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(#getH3IndexesFromUnidirectionalEdge, [edgeIndex]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> originToDirectedEdges(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(#getH3UnidirectionalEdgesFromHexagon, [edgeIndex]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<_i2.LatLng> directedEdgeToBoundary(BigInt? edgeIndex) =>
      (super.noSuchMethod(
          Invocation.method(#getH3UnidirectionalEdgeBoundary, [edgeIndex]),
          returnValue: <_i2.LatLng>[]) as List<_i2.LatLng>);
  @override
  int gridDistance(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(Invocation.method(#h3Distance, [origin, destination]),
          returnValue: 0) as int);
  @override
  List<BigInt> gridPathCells(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(Invocation.method(#h3Line, [origin, destination]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  _i2.CoordIJ cellToLocalIj(BigInt? origin, BigInt? destination) =>
      (super.noSuchMethod(
          Invocation.method(#experimentalH3ToLocalIj, [origin, destination]),
          returnValue: _FakeCoordIJ_2()) as _i2.CoordIJ);
  @override
  BigInt localIjToCell(BigInt? origin, _i2.CoordIJ? coordinates) =>
      (super.noSuchMethod(
          Invocation.method(#experimentalLocalIjToH3, [origin, coordinates]),
          returnValue: _FakeBigInt_0()) as BigInt);
  @override
  double greatCircleDistance(_i2.LatLng? a, _i2.LatLng? b, _i2.H3Units? unit) =>
      (super.noSuchMethod(Invocation.method(#pointDist, [a, b, unit]),
          returnValue: 0.0) as double);
  @override
  double cellArea(BigInt? h3Index, _i2.H3Units? unit) =>
      (super.noSuchMethod(Invocation.method(#cellArea, [h3Index, unit]),
          returnValue: 0.0) as double);
  @override
  double edgeLength(BigInt? edgeIndex, _i2.H3Units? unit) => (super
      .noSuchMethod(Invocation.method(#exactEdgeLength, [edgeIndex, unit]),
          returnValue: 0.0) as double);
  @override
  double getHexagonAreaAvg(int? res, _i2.H3AreaUnits? unit) =>
      (super.noSuchMethod(Invocation.method(#hexArea, [res, unit]),
          returnValue: 0.0) as double);
  @override
  double getHexagonEdgeLengthAvg(int? res, _i2.H3EdgeLengthUnits? unit) =>
      (super.noSuchMethod(Invocation.method(#edgeLength, [res, unit]),
          returnValue: 0.0) as double);
  @override
  int getNumCells(int? res) => (super
          .noSuchMethod(Invocation.method(#numHexagons, [res]), returnValue: 0)
      as int);
  @override
  List<BigInt> getRes0Cells() =>
      (super.noSuchMethod(Invocation.method(#getRes0Indexes, []),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  List<BigInt> getPentagons(int? res) =>
      (super.noSuchMethod(Invocation.method(#getPentagonIndexes, [res]),
          returnValue: <BigInt>[]) as List<BigInt>);
  @override
  double radsToDegs(double? val) => (super
          .noSuchMethod(Invocation.method(#radsToDegs, [val]), returnValue: 0.0)
      as double);
  @override
  double degsToRads(double? val) => (super
          .noSuchMethod(Invocation.method(#degsToRads, [val]), returnValue: 0.0)
      as double);
}
